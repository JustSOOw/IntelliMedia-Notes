---
description: 
globs: 
alwaysApply: false
---
IntelliMedia Notes: AI 增强多媒体笔记 (MVP 开发指南)

1. 项目愿景 (MVP 核心理念):

目标: 创建一个稳定、实用且具备现代交互体验的桌面笔记应用程序。

核心价值: 专注于提供流畅的富文本编辑、基础的图片嵌入与标注能力，并集成一个可扩展的 AI 助手框架（初期功能有限）。

MVP 哲学: 优先交付核心可用功能，构建坚实的技术基础，为未来迭代添加更复杂的功能（如 PDF、音视频、深度链接）做好准备，同时降低初期开发风险和复杂度。

2. 关键特性 (MVP 范围):

富文本编辑:

核心编辑器：使用 QTextEdit。

支持基本格式：加粗、斜体、下划线、列表、标题等级等。

图片处理:

允许从本地文件嵌入图片到笔记中。

提供基础图片标注能力（例如：自由画笔、添加文本注释），在选中图片后激活简单的标注模式。标注需能随笔记保存和加载。

交互模式:

无顶部菜单栏 (QMenuBar)。

上下文浮动工具栏: 当在 QTextEdit 中选中文字时，自动弹出包含常用格式化选项（加粗、斜体、颜色、对齐等）和 AI 操作入口的浮动工具栏。

QML 驱动的侧边栏: 提供笔记列表导航、设置入口、可能的全局搜索或 AI 入口。

AI 集成框架:

接口层: 定义 C++ IAiService 抽象接口。

初始实现: 实现 DeepSeekService 类，通过 QNetworkAccessManager 调用 DeepSeek API。

API Key 管理: 提供设置界面，允许用户配置 DeepSeek 的 API Key（及可能的端点），注意安全处理。

通用 AI 对话框: 可通过 Ctrl+I 快捷键或浮动工具栏的选项触发，用于通用查询或处理选中文本。

核心 AI 功能 (通过浮动工具栏或对话框触发):

文本总结。

文本润色/改写。

基础问答。

笔记管理:

创建、保存、加载笔记。

使用 SQLite 数据库或结构化文件存储笔记内容、图片引用和标注数据。

侧边栏显示笔记列表。

支持多标签页 (QTabWidget) 查看笔记。

外观:

支持全局亮/暗主题切换，效果需同时应用于 Widgets 和 QML 部分。

3. 技术栈选型:

主要语言: C++

核心框架: Qt 6 (推荐使用最新稳定版)

UI 技术 (混合):

主体框架 & 核心控件: Qt Widgets (QMainWindow, QTextEdit, 自定义浮动工具栏 QWidget)。

侧边栏: QML / Qt Quick (通过 QQuickWidget 嵌入到 Widgets 布局中)。

样式:

Widgets: QSS (Qt Style Sheets)，从外部 .qss 文件加载，由 C++ 代码管理。

QML: QML 内置样式属性，颜色等通过 C++ 暴露的主题属性绑定。

网络请求 (AI API): QNetworkAccessManager

数据存储: QtSql 模块 (SQLite) 或 QFile + QJsonDocument / QDataStream。

AI 服务: DeepSeek API (MVP 阶段)。

4. 架构与实现策略:

项目结构: 使用 Qt Creator 创建 Qt Widgets Application 项目模板作为起点。

UI 布局 (混合模式):

使用 Qt Designer (.ui 文件) 设计 QMainWindow 的基本布局，划分出侧边栏容器 (放 QQuickWidget 的 QWidget 占位符) 和主内容区容器 (放 QTextEdit 的 QWidget 占位符)。不要在 Designer 中设计 QML 内容或浮动工具栏。

用 C++ 代码实例化 QQuickWidget 和 QTextEdit，并将它们放入 Designer 创建的容器占位符的布局中。

用 C++ 代码实现自定义的浮动工具栏 QWidget，监听 QTextEdit 信号进行显隐和定位。

编写独立的 .qml 文件来设计侧边栏界面。

C++/QML 交互:

使用 QQuickWidget::rootContext()->setContextProperty() 将 C++ 对象 (如主题管理器、笔记列表模型、后端逻辑接口) 暴露给 QML。

在 C++ 对象中使用 Q_PROPERTY (带 NOTIFY 信号) 和 Q_INVOKABLE / slots 与 QML 进行双向通信。

AI 服务调用:

所有对 DeepSeek API 的调用通过 IAiService 接口进行，具体实现在 DeepSeekService 中，使用 QNetworkAccessManager 执行异步网络请求。

在 UI 中显示加载状态，处理网络错误和 API 返回错误。

主题切换:

中心化管理主题状态 (QSettings + 单例/QApplication 子类)。

使用信号通知主题变化。

Widgets 部分通过加载不同的 QSS 文件并调用 qApp->setStyleSheet() 更新。

QML 部分通过更新暴露给 QML 的 C++ 对象的属性 (带 NOTIFY 信号) 自动更新。

5. 开发工作流与工具:

IDE: 结合使用 Qt Creator (用于 Designer、编译、调试、项目管理) 和 Cursor (用于 AI 辅助 C++ 代码编写)。

UI 设计:

Widgets 静态布局: Qt Designer (.ui)。

QML 界面: 手动编写 .qml 文件。

自定义 Widgets (浮动工具栏): 手动编写 C++ 代码。

样式: 样式规则写在外部 .qss 文件中，由 C++ 加载。

版本控制: 使用 Git。

6. 关键实现细节与挑战:

浮动工具栏: 实现精确的定位、适时的显隐、跨平台一致性以及良好的交互体验是核心难点。

C++/QML 同步: 确保两者间数据和状态的顺畅、高效同步。

主题一致性: 设计好 QSS 和 QML 的样式规则，确保亮暗主题切换后整体视觉协调。

异步处理: 所有耗时操作（尤其是网络请求）必须异步执行，避免阻塞 UI。

API Key 安全: 考虑如何安全地存储或处理用户提供的 API Key。

7. Post-MVP (未来可能的扩展方向):

集成 PDF 查看与标注 (技术挑战大)。

集成音视频播放与时间戳笔记。

实现深度链接功能。

增加更多媒体标注工具。

支持更多 AI 提供商和模型。

实现更高级的 AI 功能（图像识别、语义搜索等）。

云同步与协作。
